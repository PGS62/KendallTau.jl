SPEEDTEST RESULTS

These results show that corkendall_threads is faster for arrays of size (1000,100) than StatsBase.corkendall by a 
factor of ~3.5, and for (1000,10) arrays by a factor of ~2. For very small arrays, corkendall_threads can be slower, see
the third set of results below.

Data generated on a four core PC, 15 April 2021.


julia> KendallTau.speedtest([StatsBase.corkendall,KendallTau.corkendall_threads],1000,100)
###################################################################
Executing speedtest 2021-04-15T14:43:02.417
--------------------------------------------------
size(matrix1) = (1000, 100)
StatsBase.corkendall(matrix1)
  264.402 ms (29999 allocations: 174.81 MiB)
KendallTau.corkendall_threads(matrix1)
  73.452 ms (32179 allocations: 185.77 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 3.5996659038091594
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.062697243148111
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
size(matrix2) = (1000, 100)
StatsBase.corkendall(matrix1,matrix2)
  534.567 ms (60302 allocations: 351.51 MiB) 
KendallTau.corkendall_threads(matrix1,matrix2)
  157.083 ms (62494 allocations: 363.22 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 3.40309365900488
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0333096247922609
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
size(matrix1) = (1000, 100)
StatsBase.corkendall(vector1,matrix1)
  4.843 ms (605 allocations: 3.51 MiB)       
KendallTau.corkendall_threads(vector1,matrix1)
  1.302 ms (724 allocations: 4.33 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 3.7185964373464375
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.235205832836678
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
size(vector1) = (1000,)
StatsBase.corkendall(matrix1,vector1)
  4.840 ms (603 allocations: 3.51 MiB)       
KendallTau.corkendall_threads(matrix1,vector1)
  1.292 ms (700 allocations: 4.33 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 3.746574812291973
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.2349944532660475
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
size(vector2) = (1000,)
StatsBase.corkendall(vector1,vector2)
  75.700 μs (8 allocations: 43.78 KiB)
KendallTau.corkendall_threads(vector1,vector2)
  73.900 μs (8 allocations: 43.78 KiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0243572395128553
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0
Results from both functions identical? true
###################################################################

###################################################################
Executing speedtest 2021-04-15T14:54:01.044
--------------------------------------------------
size(matrix1) = (1000, 10)
StatsBase.corkendall(matrix1)
  2.529 ms (298 allocations: 1.71 MiB)
KendallTau.corkendall_threads(matrix1)
  1.365 ms (587 allocations: 2.82 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 1.8531652989449003
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.6460843105503853
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 10)
size(matrix2) = (1000, 10)
StatsBase.corkendall(matrix1,matrix2)
  5.233 ms (631 allocations: 3.65 MiB)       
KendallTau.corkendall_threads(matrix1,matrix2)
  2.228 ms (925 allocations: 4.82 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 2.349405162738496
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.320115561567429
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
size(matrix1) = (1000, 10)
StatsBase.corkendall(vector1,matrix1)
  503.300 μs (65 allocations: 366.48 KiB)    
KendallTau.corkendall_threads(vector1,matrix1)
  219.300 μs (176 allocations: 507.84 KiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 2.2950296397628818
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.3857173310594757
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 10)
size(vector1) = (1000,)
StatsBase.corkendall(matrix1,vector1)
  503.300 μs (63 allocations: 366.39 KiB)    
KendallTau.corkendall_threads(matrix1,vector1)
  224.000 μs (152 allocations: 506.97 KiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 2.246875
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.383683739178643
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
size(vector2) = (1000,)
StatsBase.corkendall(vector1,vector2)
  75.000 μs (8 allocations: 43.78 KiB)       
KendallTau.corkendall_threads(vector1,vector2)
  72.400 μs (8 allocations: 43.78 KiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0359116022099448
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0
Results from both functions identical? true
###################################################################


julia> KendallTau.speedtest([StatsBase.corkendall,KendallTau.corkendall_threads],10,10)
###################################################################
Executing speedtest 2021-04-15T14:59:04.737
--------------------------------------------------
size(matrix1) = (10, 10)
StatsBase.corkendall(matrix1)
  17.800 μs (253 allocations: 35.47 KiB)
KendallTau.corkendall_threads(matrix1)   
  18.300 μs (541 allocations: 65.12 KiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 0.9726775956284153
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.8361233480176211
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (10, 10)
size(matrix2) = (10, 10)
StatsBase.corkendall(matrix1,matrix2)
  37.000 μs (531 allocations: 74.47 KiB)     
KendallTau.corkendall_threads(matrix1,matrix2)
  30.400 μs (824 allocations: 105.41 KiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 1.2171052631578947
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.4154427192614352
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (10,)
size(matrix1) = (10, 10)
StatsBase.corkendall(vector1,matrix1)
  3.550 μs (55 allocations: 7.45 KiB)        
KendallTau.corkendall_threads(vector1,matrix1)
  6.500 μs (165 allocations: 16.59 KiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 0.5461538461538461
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 2.2264150943396226
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (10, 10)
size(vector1) = (10,)
StatsBase.corkendall(matrix1,vector1)
  3.487 μs (53 allocations: 7.36 KiB)        
KendallTau.corkendall_threads(matrix1,vector1)
  8.100 μs (142 allocations: 15.75 KiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 0.4305555555555556
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 2.140127388535032
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (10,)
size(vector2) = (10,)
StatsBase.corkendall(vector1,vector2)
  567.760 ns (7 allocations: 896 bytes)      
KendallTau.corkendall_threads(vector1,vector2)
  587.222 ns (7 allocations: 896 bytes)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 0.9668563984056331
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0 
Results from both functions identical? true
###################################################################


###################################################################
Executing speedtest 2023-01-06T15:29:08.260
ComputerName = DESKTOP-HSGAM5S
--------------------------------------------------
size(matrix1) = (1000, 100)
StatsBase.corkendall(matrix1)
  185.011 ms (29999 allocations: 174.73 MiB)
KendallTau.corkendall_threads(matrix1)
  43.889 ms (30050 allocations: 174.73 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 4.215412903402203
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0000296041790273
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
size(matrix2) = (1000, 100)
StatsBase.corkendall(matrix1,matrix2)
  370.338 ms (60302 allocations: 351.36 MiB)
KendallTau.corkendall_threads(matrix1,matrix2)
  58.522 ms (60351 allocations: 351.36 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 6.328155250220856
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.000014895749513
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
size(matrix1) = (1000, 100)
StatsBase.corkendall(vector1,matrix1)
  3.397 ms (605 allocations: 3.51 MiB)
KendallTau.corkendall_threads(vector1,matrix1)
  508.600 μs (652 allocations: 3.51 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 6.679119150609516
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.001466677692137
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
size(vector1) = (1000,)
StatsBase.corkendall(matrix1,vector1)
  3.362 ms (603 allocations: 3.51 MiB)
KendallTau.corkendall_threads(matrix1,vector1)
  515.100 μs (652 allocations: 3.51 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 6.526111434672879
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0014928296302743
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
size(vector2) = (1000,)
StatsBase.corkendall(vector1,vector2)
  29.500 μs (8 allocations: 43.77 KiB)
KendallTau.corkendall_threads(vector1,vector2)
  28.100 μs (10 allocations: 59.64 KiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0498220640569396
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.3627275972866832
Results from both functions identical? true
###################################################################

###################################################################
Executing speedtest 2023-01-06T15:38:10.603
ComputerName = DESKTOP-HSGAM5S
Threads.nthreads() = 20
--------------------------------------------------
size(matrix1) = (1000, 100)
StatsBase.corkendall(matrix1)
  199.949 ms (29999 allocations: 174.73 MiB)
KendallTau.corkendall_threads(matrix1)
  20.428 ms (30120 allocations: 174.74 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 9.788082906627244
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0000727441921229
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
size(matrix2) = (1000, 100)
StatsBase.corkendall(matrix1,matrix2)
  367.298 ms (60302 allocations: 351.36 MiB)
KendallTau.corkendall_threads(matrix1,matrix2)
  47.178 ms (60423 allocations: 351.37 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 7.785444332573791
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0000370439484976
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
size(matrix1) = (1000, 100)
StatsBase.corkendall(vector1,matrix1)
  3.364 ms (605 allocations: 3.51 MiB)
KendallTau.corkendall_threads(vector1,matrix1)
  348.600 μs (724 allocations: 3.52 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 9.650028686173265
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0036862789472998
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
size(vector1) = (1000,)
StatsBase.corkendall(matrix1,vector1)
  3.301 ms (603 allocations: 3.51 MiB)
KendallTau.corkendall_threads(matrix1,vector1)
  350.700 μs (724 allocations: 3.52 MiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 9.412318220701454
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.0037124888473006
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
size(vector2) = (1000,)
StatsBase.corkendall(vector1,vector2)
  33.600 μs (8 allocations: 43.77 KiB)
KendallTau.corkendall_threads(vector1,vector2)
  26.300 μs (10 allocations: 59.64 KiB)
Speed ratio KendallTau.corkendall_threads vs StatsBase.corkendall: 1.2775665399239544
Ratio of memory allocated KendallTau.corkendall_threads vs StatsBase.corkendall: 1.3627275972866832
Results from both functions identical? true
###################################################################

Below looks very ominous! slower each time I call the same method!
PGS 6 Jan 2023

julia> @time KendallTau.corkendall_threads(rand(MersenneTwister(0),1000,2000));
 39.454754 seconds (12.00 M allocations: 68.348 GiB, 43.58% gc time)

julia> @time KendallTau.corkendall_threads(rand(MersenneTwister(0),1000,2000));
 46.008928 seconds (12.00 M allocations: 68.348 GiB, 45.41% gc time)

julia> @time KendallTau.corkendall_threads(rand(MersenneTwister(0),1000,2000));
 55.722049 seconds (12.00 M allocations: 68.348 GiB, 47.18% gc time)

julia> @time KendallTau.corkendall_threads(rand(MersenneTwister(0),1000,2000));
 66.046658 seconds (12.00 M allocations: 68.348 GiB, 48.95% gc time)

julia> @time KendallTau.corkendall_threads(rand(MersenneTwister(0),1000,2000));
 83.809118 seconds (12.00 M allocations: 68.348 GiB, 52.15% gc time)

julia> KT.speedtest([KT.corkendall,KT.corkendall_threads],1000,100,true)
###################################################################
Executing speedtest 2023-01-17T17:37:55.747
ComputerName = DESKTOP-HSGAM5S
Threads.nthreads() = 20
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Float64}
KendallTau.corkendall(matrix1)
  167.822 ms (20297 allocations: 99.52 MiB)
KendallTau.corkendall_threads(matrix1)
  17.944 ms (20418 allocations: 99.54 MiB)
Speed ratio KendallTau.corkendall_threads vs KendallTau.corkendall: 9.35271989611953
Ratio of memory allocated KendallTau.corkendall_threads vs KendallTau.corkendall: 1.0001277123543688
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Float64}
size(matrix2) = (1000, 100)
typeof(matrix2) = Matrix{Float64}
KendallTau.corkendall(matrix1,matrix2)
  335.896 ms (40502 allocations: 197.88 MiB)
KendallTau.corkendall_threads(matrix1,matrix2)
  29.523 ms (40623 allocations: 197.89 MiB)
Speed ratio KendallTau.corkendall_threads vs KendallTau.corkendall: 11.37737906927118
Ratio of memory allocated KendallTau.corkendall_threads vs KendallTau.corkendall: 1.0000657757611
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
typeof(vector1) = Vector{Float64}
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Float64}
KendallTau.corkendall(vector1,matrix1)
  3.160 ms (506 allocations: 2.74 MiB)
KendallTau.corkendall_threads(vector1,matrix1)
  318.900 μs (731 allocations: 2.76 MiB)
Speed ratio KendallTau.corkendall_threads vs KendallTau.corkendall: 9.909375979931013
Ratio of memory allocated KendallTau.corkendall_threads vs KendallTau.corkendall: 1.0081736581995666
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Float64}
size(vector1) = (1000,)
typeof(vector1) = Vector{Float64}
KendallTau.corkendall(matrix1,vector1)
  3.139 ms (504 allocations: 2.74 MiB)
KendallTau.corkendall_threads(matrix1,vector1)
  327.100 μs (731 allocations: 2.76 MiB)
Speed ratio KendallTau.corkendall_threads vs KendallTau.corkendall: 9.594925099357994
Ratio of memory allocated KendallTau.corkendall_threads vs KendallTau.corkendall: 1.008207362667365
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
typeof(vector1) = Vector{Float64}
size(vector2) = (1000,)
typeof(vector2) = Vector{Float64}
KendallTau.corkendall(vector1,vector2)
  32.300 μs (8 allocations: 43.77 KiB)
KendallTau.corkendall_threads(vector1,vector2)
  32.300 μs (8 allocations: 43.77 KiB)
Speed ratio KendallTau.corkendall_threads vs KendallTau.corkendall: 1.0
Ratio of memory allocated KendallTau.corkendall_threads vs KendallTau.corkendall: 1.0
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Union{Missing, Float64}}
KendallTau.corkendall(matrix1;skipmissing=:pairwise)
  159.663 ms (30197 allocations: 177.78 MiB)
KendallTau.corkendall_threads(matrix1;skipmissing=:pairwise)
  20.245 ms (30321 allocations: 177.80 MiB)
Speed ratio KendallTau.corkendall_threads vs KendallTau.corkendall: 7.886588721110008
Ratio of memory allocated KendallTau.corkendall_threads vs KendallTau.corkendall: 1.0000721807743032
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Union{Missing, Float64}}
size(matrix2) = (1000, 100)
typeof(matrix2) = Matrix{Union{Missing, Float64}}
KendallTau.corkendall(matrix1,matrix2;skipmissing=:pairwise)
  319.062 ms (60502 allocations: 355.72 MiB)
KendallTau.corkendall_threads(matrix1,matrix2;skipmissing=:pairwise)
  48.626 ms (60626 allocations: 355.74 MiB)
Speed ratio KendallTau.corkendall_threads vs KendallTau.corkendall: 6.5616136356158075
Ratio of memory allocated KendallTau.corkendall_threads vs KendallTau.corkendall: 1.000037018533331
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
typeof(matrix1) = Matrix{Union{Missing, Float64}}
KendallTau.corkendall(vector1,matrix1;skipmissing=:pairwise)
  2.905 ms (709 allocations: 4.42 MiB)
KendallTau.corkendall_threads(vector1,matrix1;skipmissing=:pairwise)
  339.900 μs (931 allocations: 4.44 MiB)
Speed ratio KendallTau.corkendall_threads vs KendallTau.corkendall: 8.54721977052074
Ratio of memory allocated KendallTau.corkendall_threads vs KendallTau.corkendall: 1.0050690034069785
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Union{Missing, Float64}}
size(vector1) = (1000,)
typeof(vector1) = Vector{Union{Missing, Float64}}
KendallTau.corkendall(matrix1,vector1;skipmissing=:pairwise)
  2.900 ms (707 allocations: 4.42 MiB)
KendallTau.corkendall_threads(matrix1,vector1;skipmissing=:pairwise)
  350.800 μs (931 allocations: 4.44 MiB)
Speed ratio KendallTau.corkendall_threads vs KendallTau.corkendall: 8.267103762827823
Ratio of memory allocated KendallTau.corkendall_threads vs KendallTau.corkendall: 1.0050898410504492
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
typeof(vector1) = Vector{Union{Missing, Float64}}
size(vector2) = (1000,)
typeof(vector2) = Vector{Union{Missing, Float64}}
KendallTau.corkendall(vector1,vector2;skipmissing=:pairwise)
  45.300 μs (10 allocations: 61.27 KiB)
KendallTau.corkendall_threads(vector1,vector2;skipmissing=:pairwise)
  46.200 μs (10 allocations: 61.27 KiB)
Speed ratio KendallTau.corkendall_threads vs KendallTau.corkendall: 0.9805194805194806
Ratio of memory allocated KendallTau.corkendall_threads vs KendallTau.corkendall: 1.0
Results from both functions identical? true
###################################################################


julia> KT.speedtest([KT.corkendall,KT.FromStatsBase.corkendall_pw],1000,100,true)
###################################################################
Executing speedtest 2023-01-17T19:23:10.917
ComputerName = 109OCS-KITCHEN
Threads.nthreads() = 1
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Float64}
KendallTau.corkendall(matrix1)
  296.249 ms (20297 allocations: 99.52 MiB)
KendallTau.FromStatsBase.corkendall_pw(matrix1)
  283.060 ms (29999 allocations: 174.73 MiB)
Speed ratio KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.046593687976887
Ratio of memory allocated KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.755636438343143
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Float64}
size(matrix2) = (1000, 100)
typeof(matrix2) = Matrix{Float64}
KendallTau.corkendall(matrix1,matrix2)
  509.496 ms (40502 allocations: 197.88 MiB)
KendallTau.FromStatsBase.corkendall_pw(matrix1,matrix2)
  559.936 ms (60302 allocations: 351.36 MiB)
Speed ratio KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 0.9099184549662819
Ratio of memory allocated KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.7756142033387097
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
typeof(vector1) = Vector{Float64}
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Float64}
KendallTau.corkendall(vector1,matrix1)
  4.855 ms (506 allocations: 2.74 MiB)
KendallTau.FromStatsBase.corkendall_pw(vector1,matrix1)
  5.188 ms (605 allocations: 3.51 MiB)
Speed ratio KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 0.935815889904013
Ratio of memory allocated KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.2802110553323787
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Float64}
size(vector1) = (1000,)
typeof(vector1) = Vector{Float64}
KendallTau.corkendall(matrix1,vector1)
  4.882 ms (504 allocations: 2.74 MiB)
KendallTau.FromStatsBase.corkendall_pw(matrix1,vector1)
  5.145 ms (603 allocations: 3.51 MiB)
Speed ratio KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 0.9488415487482507
Ratio of memory allocated KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.2802204231277128
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
typeof(vector1) = Vector{Float64}
size(vector2) = (1000,)
typeof(vector2) = Vector{Float64}
KendallTau.corkendall(vector1,vector2)
  78.700 μs (8 allocations: 43.77 KiB)
KendallTau.FromStatsBase.corkendall_pw(vector1,vector2)
  77.900 μs (9 allocations: 43.78 KiB)
Speed ratio KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.0102695763799743
Ratio of memory allocated KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.00035701535166
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Union{Missing, Float64}}
KendallTau.corkendall(matrix1;skipmissing=:pairwise)
  238.546 ms (30197 allocations: 177.78 MiB)
KendallTau.FromStatsBase.corkendall_pw(matrix1;skipmissing=:pairwise)
  745.015 ms (80109 allocations: 271.81 MiB)
Speed ratio KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 0.32018947811506565
Ratio of memory allocated KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.5288846688550344
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Union{Missing, Float64}}
size(matrix2) = (1000, 100)
typeof(matrix2) = Matrix{Union{Missing, Float64}}
KendallTau.corkendall(matrix1,matrix2;skipmissing=:pairwise)
  473.219 ms (60502 allocations: 355.72 MiB)
KendallTau.FromStatsBase.corkendall_pw(matrix1,matrix2;skipmissing=:pairwise)
  1.484 s (149809 allocations: 539.24 MiB)
Speed ratio KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 0.3189617490869137
Ratio of memory allocated KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.515885733610602
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
typeof(vector1) = Vector{Union{Missing, Float64}}
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Union{Missing, Float64}}
KendallTau.corkendall(vector1,matrix1;skipmissing=:pairwise)
  4.412 ms (709 allocations: 4.42 MiB)
KendallTau.FromStatsBase.corkendall_pw(vector1,matrix1;skipmissing=:pairwise)
  14.487 ms (1716 allocations: 5.87 MiB)
Speed ratio KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 0.3045425993801468
Ratio of memory allocated KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.3301624707158801
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (1000, 100)
typeof(matrix1) = Matrix{Union{Missing, Float64}}
size(vector1) = (1000,)
typeof(vector1) = Vector{Union{Missing, Float64}}
KendallTau.corkendall(matrix1,vector1;skipmissing=:pairwise)
  4.422 ms (707 allocations: 4.42 MiB)
KendallTau.FromStatsBase.corkendall_pw(matrix1,vector1;skipmissing=:pairwise)
  14.607 ms (1421 allocations: 5.45 MiB)
Speed ratio KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 0.3027288660076129
Ratio of memory allocated KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.233738769868694
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (1000,)
typeof(vector1) = Vector{Union{Missing, Float64}}
size(vector2) = (1000,)
typeof(vector2) = Vector{Union{Missing, Float64}}
KendallTau.corkendall(vector1,vector2;skipmissing=:pairwise)
  101.900 μs (10 allocations: 61.27 KiB)
KendallTau.FromStatsBase.corkendall_pw(vector1,vector2;skipmissing=:pairwise)
  155.700 μs (32 allocations: 66.19 KiB)
Speed ratio KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 0.6544637122671805
Ratio of memory allocated KendallTau.FromStatsBase.corkendall_pw vs KendallTau.corkendall: 1.080336648814078
Results from both functions identical? true
###################################################################


TEST THAT SHOWED IT'S WORTH USING   @sync and @spawn as opposed to just Threads.@threads
about 20% speedup as a result of higher thread utilisation
julia> KendallTau.how_scaleable(KendallTau.corkendall_experimental_sync,KendallTau.corkendall_experimental,1000,2 .^ (5:11)
       ,false)
###################################################################
Executing how_scaleable 2023-01-21T07:59:45.835
ComputerName = PHILIP-LAPTOP
fn1 = KendallTau.corkendall_experimental_sync
fn2 = KendallTau.corkendall_experimental
nr = 1000
ncs = [32, 64, 128, 256, 512, 1024, 2048]
with_missings = false
Threads.nthreads() = 8
  5.941 ms (2341 allocations: 10.65 MiB)
  7.347 ms (2191 allocations: 10.63 MiB)
nc = 32, nr = 1000, fn1 = corkendall_experimental_sync, fn2 = corkendall_experimental, time1 = 0.0059413, time2 = 0.0073469, ratio = 0.808681212484177
  23.356 ms (8775 allocations: 41.28 MiB)
  30.713 ms (8432 allocations: 41.24 MiB)
nc = 64, nr = 1000, fn1 = corkendall_experimental_sync, fn2 = corkendall_experimental, time1 = 0.023356, time2 = 0.0307126, ratio = 0.7604696443804823
  95.389 ms (33927 allocations: 162.40 MiB)
  130.379 ms (33201 allocations: 162.32 MiB)
nc = 128, nr = 1000, fn1 = corkendall_experimental_sync, fn2 = corkendall_experimental, time1 = 0.0953888, time2 = 0.1303793, ratio = 0.7316253423664646
  448.300 ms (133384 allocations: 644.09 MiB)
  551.808 ms (131888 allocations: 643.92 MiB)
nc = 256, nr = 1000, fn1 = corkendall_experimental_sync, fn2 = corkendall_experimental, time1 = 0.4483, time2 = 0.551808, ratio = 0.8124202621201577
  2.133 s (528936 allocations: 2.51 GiB)
  2.176 s (525973 allocations: 2.50 GiB)
nc = 512, nr = 1000, fn1 = corkendall_experimental_sync, fn2 = corkendall_experimental, time1 = 2.1326329, time2 = 2.1762322, ratio = 0.9799656948371595
  8.813 s (2106542 allocations: 10.00 GiB)
  10.067 s (2100777 allocations: 10.00 GiB)
nc = 1024, nr = 1000, fn1 = corkendall_experimental_sync, fn2 = corkendall_experimental, time1 = 8.8134886, time2 = 10.0668585, ratio = 0.8754954288867772
  47.457 s (8407685 allocations: 39.95 GiB)
  57.815 s (8396880 allocations: 39.95 GiB)
nc = 2048, nr = 1000, fn1 = corkendall_experimental_sync, fn2 = corkendall_experimental, time1 = 47.4571438, time2 = 57.8151552, ratio = 0.8208426257065552
7×4 Matrix{Float64}:
   32.0   0.0059413   0.0073469  0.808681
   64.0   0.023356    0.0307126  0.76047
  128.0   0.0953888   0.130379   0.731625
  256.0   0.4483      0.551808   0.81242
  512.0   2.13263     2.17623    0.979966
 1024.0   8.81349    10.0669     0.875495
 2048.0  47.4571     57.8152     0.820843
###################################################################

###################################################################
Executing how_scaleable 2023-01-24T20:55:38.125
ComputerName = MV-LAPTOP
fn1 = KendallTau.corkendall_experimental
fn2 = KendallTau.corkendall_threaded
nr = 1000
ncs = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]
with_missings = false
Threads.nthreads() = 8
nc = 2, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 0.0527013, time2 = 0.1119156, ratio = 0.47090217985696364
nc = 4, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 0.0003749, time2 = 0.0003611, ratio = 1.0382165605095541
nc = 8, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 0.0007598, time2 = 0.000823, ratio = 0.9232077764277036
nc = 16, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 0.0025333, time2 = 0.0038149, ratio = 0.6640541036462293
nc = 32, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 0.0101935, time2 = 0.0139893, ratio = 0.7286640503813628
nc = 64, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 0.1303084, time2 = 0.0399335, ratio = 3.263134961874116
nc = 128, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 0.1358018, time2 = 0.4585699, ratio = 0.29614198402468195
nc = 256, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 0.7677599, time2 = 1.0986352, ratio = 0.6988306036435025
nc = 512, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 2.517709, time2 = 3.3503314,ded,ded, time1 = 49.2300388, time2 = 64.6590096, ratio = 0.7613794133957783
ded, time1 = 49.2300388, time2 = 64.6590096, ratio = 0.7613794133957783nc = 4096, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 332.2118334, time2 = 424.0690924, ratio = 0.7833908185099321nc = 8192, nr = 1000, fn1 = corkendall_experimental, fn2 = corkendall_threaded, time1 = 3475.3561758, time2 = 5380.3387426, ratio = 0.645936314061996413×4 Matrix{Float64}:
    2.0     0.0527013     0.111916   0.470902
    4.0     0.0003749     0.0003611  1.03822
    8.0     0.0007598     0.000823   0.923208
   16.0     0.0025333     0.0038149  0.664054
   32.0     0.0101935     0.0139893  0.728664
   64.0     0.130308      0.0399335  3.26313
  128.0     0.135802      0.45857    0.296142
  256.0     0.76776       1.09864    0.698831
  512.0     2.51771       3.35033    0.751481
 1024.0    11.0495       11.1097     0.99458
 2048.0    49.23         64.659      0.761379
 4096.0   332.212       424.069      0.783391
 8192.0  3475.36       5380.34       0.645936
###################################################################

julia> KT.how_scaleable(KT.corkendall_unthreaded,KT.corkendall_threaded,1000,2 .^(1:11),false)
###################################################################
Executing how_scaleable 2023-01-26T18:49:24.819
ComputerName = MV-LAPTOP
fn1 = KendallTau.corkendall_unthreaded
fn2 = KendallTau.corkendall_threaded
nr = 1000
ncs = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]
with_missings = false
Threads.nthreads() = 8
  66.900 μs (10 allocations: 51.80 KiB)
  84.100 μs (60 allocations: 57.06 KiB)
nc = 2, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 6.69e-5, time2 = 8.41e-5, ratio = 0.7954815695600476
  386.500 μs (40 allocations: 215.11 KiB)
  197.600 μs (89 allocations: 220.34 KiB)
nc = 4, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.0003865, time2 = 0.0001976, ratio = 1.9559716599190284      
  1.621 ms (148 allocations: 781.17 KiB)
  453.000 μs (197 allocations: 786.41 KiB)
nc = 8, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.0016211, time2 = 0.000453, ratio = 3.5785871964679914       
 = 0.0073333, ratio = 3.4425838299265
  100.566 ms (8381 allocations: 41.24 MiB)
  30.183 ms (8430 allocations: 41.24 MiB)
nc = 64, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.1005661, time2 = 0.0301833, ratio = 3.3318457557656056
 = 0.0073333, ratio = 3.4425838299265
  100.566 ms (8381 allocations: 41.24 MiB)
  30.183 ms (8430 allocations: 41.24 MiB)nc = 64, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.1005661, time2 = 0.0301833, ratio = 3.3318457557656056
  30.183 ms (8430 allocations: 41.24 MiB)
nc = 64, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.1005661, time2 = 0.0301833, ratio = 3.3318457557656056  411.754 ms (33149 allocations: 162.32 MiB)
  136.875 ms (33198 allocations: 162.32 MiB)
nc = 128, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.411754, time2 = 0.1368754, ratio = 3.008239610623969  1.639 s (131837 allocations: 643.92 MiB)
  655.939 ms (131886 allocations: 643.92 MiB)
nc = 256, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 1.6389535, time2 = 0.6559392, ratio = 2.4986363065357278  6.756 s (525821 allocations: 2.50 GiB)
  2.580 s (525870 allocations: 2.50 GiB)
nc = 512, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 6.7559919, time2 = 2.5804742, ratio = 2.618120305174917  43.188 s (2100221 allocations: 10.00 GiB)
  17.611 s (2100272 allocations: 10.00 GiB)
nc = 1024, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 43.1876938, time2 = 17.6106193, ratio = 2.4523665558995984
  125.846 s (8394749 allocations: 39.95 GiB)
  72.843 s (8394801 allocations: 39.95 GiB)
nc = 2048, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 125.8463768, time2 = 72.8433304, ratio = 1.7276307399585893
11×4 Matrix{Float64}:
    2.0    6.69e-5     8.41e-5    0.795482
    4.0    0.0003865   0.0001976  1.95597
    8.0    0.0016211   0.000453   3.57859
   16.0    0.0063823   0.0016659  3.83114
   32.0    0.0252455   0.0073333  3.44258
   64.0    0.100566    0.0301833  3.33185
  128.0    0.411754    0.136875   3.00824
  256.0    1.63895     0.655939   2.49864
  512.0    6.75599     2.58047    2.61812
 1024.0   43.1877     17.6106     2.45237
 2048.0  125.846      72.8433     1.72763
###################################################################

julia> KT.how_scaleable(KT.corkendall_unthreaded,KT.corkendall_threaded,1000,2 .^(1:12),false)
###################################################################
Executing how_scaleable 2023-01-26T19:20:19.575
ComputerName = MV-LAPTOP
fn1 = KendallTau.corkendall_unthreaded
fn2 = KendallTau.corkendall_threaded
nr = 1000
ncs = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
with_missings = false
Threads.nthreads() = 8
  67.300 μs (10 allocations: 51.80 KiB)
  83.200 μs (59 allocations: 57.03 KiB)
nc = 2, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 6.73e-5, time2 = 8.32e-5, ratio = 0.8088942307692307 
  387.200 μs (40 allocations: 215.11 KiB)
  190.200 μs (89 allocations: 220.34 KiB)
nc = 4, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.0003872, time2 = 0.0001902, ratio = 2.035751840168244
  1.629 ms (148 allocations: 781.17 KiB)
  464.700 μs (197 allocations: 786.41 KiB)
nc = 8, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.0016293, time2 = 0.0004647, ratio = 3.5061329890251773
  6.381 ms (556 allocations: 2.80 MiB)
  1.663 ms (605 allocations: 2.81 MiB)
nc = 16, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.0063809, time2 = 0.0016625, ratio = 3.838135338345865
  25.265 ms (2140 allocations: 10.63 MiB)
  6.921 ms (2189 allocations: 10.63 MiB)
nc = 32, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.0252648, time2 = 0.0069211, ratio = 3.650402392683244
  107.114 ms (8381 allocations: 41.24 MiB)
  29.664 ms (8430 allocations: 41.24 MiB)
nc = 64, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.1071142, time2 = 0.0296644, ratio = 3.6108668976955545
  421.840 ms (33149 allocations: 162.32 MiB)
  143.740 ms (33198 allocations: 162.32 MiB)
nc = 128, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 0.4218402, time2 = 0.1437398, ratio = 2.934748761303411
  1.717 s (131837 allocations: 643.92 MiB)
  670.204 ms (131886 allocations: 643.92 MiB)
nc = 256, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 1.7166905, time2 = 0.6702044, ratio = 2.561443195538555
  7.042 s (525821 allocations: 2.50 GiB)
  3.113 s (525870 allocations: 2.50 GiB)
nc = 512, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 7.0415698, time2 = 3.1131998, ratio = 2.261843200683747
  31.451 s (2100221 allocations: 10.00 GiB)
  15.176 s (2100270 allocations: 10.00 GiB)
nc = 1024, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 31.4512507, time2 = 15.176199, ratio = 2.0724063186045463
  2947.015 s (8394749 allocations: 39.95 GiB)
  79.606 s (8394801 allocations: 39.95 GiB)
nc = 2048, nr = 1000, fn1 = corkendall_unthreaded, fn2 = corkendall_threaded, time1 = 2947.0153862, time2 = 79.6062608, ratio = 37.01989462366508
  461.383 s (33566717 allocations: 159.71 GiB)
068, time2 = 626.0953581, ratio = 0.7369219414118509
12×4 Matrix{Float64}:
    2.0     6.73e-5      8.32e-5     0.808894
    4.0     0.0003872    0.0001902   2.03575
    8.0     0.0016293    0.0004647   3.50613
   16.0     0.0063809    0.0016625   3.83814
   32.0     0.0252648    0.0069211   3.6504
   64.0     0.107114     0.0296644   3.61087
  128.0     0.42184      0.14374     2.93475
  256.0     1.71669      0.670204    2.56144
  512.0     7.04157      3.1132      2.26184
 1024.0    31.4513      15.1762      2.07241
 2048.0  2947.02        79.6063     37.0199
 4096.0   461.383      626.095       0.736922
###################################################################