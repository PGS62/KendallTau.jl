julia> using StatsBase,KendallTau;include("scripts/performancetests.jl");speedtest([StatsBase.corkendall,KendallTau.corkendall],2000,500,false)
###################################################################
Executing speedtest 2023-02-16T14:33:53.193
ComputerName = DESKTOP-HSGAM5S
Threads.nthreads() = 20
--------------------------------------------------
size(matrix1) = (2000, 500)
typeof(matrix1) = Matrix{Float64}
StatsBase.corkendall(matrix1)
  9.863 s (749999 allocations: 8.46 GiB)
KendallTau.corkendall(matrix1)
  957.019 ms (1275 allocations: 4.23 MiB)
Speed ratio KendallTau.corkendall vs StatsBase.corkendall: 10.305753435536058
Ratio of memory allocated KendallTau.corkendall vs StatsBase.corkendall: 0.0004884558879894104
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (2000, 500)
typeof(matrix1) = Matrix{Float64}
size(matrix2) = (2000, 500)
typeof(matrix2) = Matrix{Float64}
StatsBase.corkendall(matrix1,matrix2)
  19.638 s (1501502 allocations: 16.93 GiB)
KendallTau.corkendall(matrix1,matrix2)
  1.263 s (1279 allocations: 4.23 MiB)
Speed ratio KendallTau.corkendall vs StatsBase.corkendall: 15.551004568918353
Ratio of memory allocated KendallTau.corkendall vs StatsBase.corkendall: 0.00024399157252913084
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (2000,)
typeof(vector1) = Vector{Float64}
size(matrix1) = (2000, 500)
typeof(matrix1) = Matrix{Float64}
StatsBase.corkendall(vector1,matrix1)
  37.793 ms (3005 allocations: 34.66 MiB)
KendallTau.corkendall(vector1,matrix1)
  5.277 ms (1279 allocations: 2.33 MiB)
Speed ratio KendallTau.corkendall vs StatsBase.corkendall: 7.161408295908893
Ratio of memory allocated KendallTau.corkendall vs StatsBase.corkendall: 0.06724240789864723
Results from both functions identical? true
--------------------------------------------------
size(matrix1) = (2000, 500)
typeof(matrix1) = Matrix{Float64}
size(vector1) = (2000,)
typeof(vector1) = Vector{Float64}
StatsBase.corkendall(matrix1,vector1)
  37.929 ms (3003 allocations: 34.66 MiB)
KendallTau.corkendall(matrix1,vector1)
  5.263 ms (1280 allocations: 2.33 MiB)
Speed ratio KendallTau.corkendall vs StatsBase.corkendall: 7.206726201786053
Ratio of memory allocated KendallTau.corkendall vs StatsBase.corkendall: 0.06713031349435052
Results from both functions identical? true
--------------------------------------------------
size(vector1) = (2000,)
typeof(vector1) = Vector{Float64}
size(vector2) = (2000,)
typeof(vector2) = Vector{Float64}
StatsBase.corkendall(vector1,vector2)
  106.800 μs (8 allocations: 86.70 KiB)
KendallTau.corkendall(vector1,vector2)
  101.900 μs (9 allocations: 94.64 KiB)
Speed ratio KendallTau.corkendall vs StatsBase.corkendall: 1.0480863591756624
Ratio of memory allocated KendallTau.corkendall vs StatsBase.corkendall: 1.0915480266714723
Results from both functions identical? true
###################################################################

julia> using StatsBase,KendallTau;include("scripts/performancetests.jl");how_scaleable([StatsBase.corkendall,KendallTau.corkendall],1000,2 .^(1:12),false,true,true)
###################################################################
Executing how_scaleable 2023-02-14T16:14:20.042
ComputerName = DESKTOP-HSGAM5S
fns[1] = StatsBase.corkendall
fns[2] = KendallTau.corkendall
ncs = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
with_missings = false
use_benchmark_tools = true
Threads.nthreads() = 20
  34.300 μs (10 allocations: 51.80 KiB)
nc = 2, nr = 1000, f = StatsBase.corkendall,  time = 3.43e-5
  160.900 μs (2277 allocations: 1.19 MiB)
nc = 2, nr = 1000, f = KendallTau.corkendall,  time = 0.0001609, ratio = 0.21317588564325668
  270.800 μs (46 allocations: 262.73 KiB)
nc = 4, nr = 1000, f = StatsBase.corkendall,  time = 0.0002708
  242.500 μs (6271 allocations: 1.25 MiB)
nc = 4, nr = 1000, f = KendallTau.corkendall,  time = 0.0002425, ratio = 1.1167010309278351
  1.119 ms (190 allocations: 1.09 MiB)
nc = 8, nr = 1000, f = StatsBase.corkendall,  time = 0.001119
  389.300 μs (14331 allocations: 1.37 MiB)
nc = 8, nr = 1000, f = KendallTau.corkendall,  time = 0.0003893, ratio = 2.874389930644747
  4.429 ms (766 allocations: 4.43 MiB)
nc = 16, nr = 1000, f = StatsBase.corkendall,  time = 0.0044292
  18.177 ms (3070 allocations: 17.84 MiB)
nc = 32, nr = 1000, f = StatsBase.corkendall,  time = 0.0181775
  1.808 ms (64707 allocations: 2.19 MiB)
nc = 32, nr = 1000, f = KendallTau.corkendall,  time = 0.0018085, ratio = 10.05114735969035
  75.745 ms (12287 allocations: 71.51 MiB)
nc = 64, nr = 1000, f = StatsBase.corkendall,  time = 0.075745
  7.646 ms (137252 allocations: 3.47 MiB)
nc = 64, nr = 1000, f = KendallTau.corkendall,  time = 0.0076462, ratio = 9.906227930213703
  329.361 ms (49151 allocations: 286.36 MiB)
nc = 128, nr = 1000, f = StatsBase.corkendall,  time = 0.3293615
  29.084 ms (300772 allocations: 6.62 MiB)
nc = 128, nr = 1000, f = KendallTau.corkendall,  time = 0.0290844, ratio = 11.324335382541843
  1.389 s (196607 allocations: 1.12 GiB)
nc = 256, nr = 1000, f = StatsBase.corkendall,  time = 1.3886278
  116.684 ms (701540 allocations: 15.37 MiB)
nc = 256, nr = 1000, f = KendallTau.corkendall,  time = 0.116684, ratio = 11.900755887696686
  5.688 s (786431 allocations: 4.48 GiB)
nc = 512, nr = 1000, f = StatsBase.corkendall,  time = 5.6878155
  487.307 ms (1800528 allocations: 42.65 MiB)
nc = 512, nr = 1000, f = KendallTau.corkendall,  time = 0.4873072, ratio = 11.671929944806891
  21.309 s (3145727 allocations: 17.91 GiB)
nc = 1024, nr = 1000, f = StatsBase.corkendall,  time = 21.3085117
  2.001 s (7521616 allocations: 171.97 MiB)
nc = 1024, nr = 1000, f = KendallTau.corkendall,  time = 2.0009986, ratio = 10.648938834839765
  77.748 s (12582911 allocations: 71.65 GiB)
nc = 2048, nr = 1000, f = StatsBase.corkendall,  time = 77.7478732
  9.051 s (29973839 allocations: 682.61 MiB)
nc = 2048, nr = 1000, f = KendallTau.corkendall,  time = 9.050901, ratio = 8.590070005185119
  377.481 s (50331647 allocations: 286.62 GiB)
nc = 4096, nr = 1000, f = StatsBase.corkendall,  time = 377.4813468
  42.907 s (118918482 allocations: 2.65 GiB)
nc = 4096, nr = 1000, f = KendallTau.corkendall,  time = 42.9068747, ratio = 8.797689168444608
12×3 Matrix{Float64}:
    2.0    3.43e-5     0.0001609
    4.0    0.0002708   0.0002425
    8.0    0.001119    0.0003893
   16.0    0.0044292   0.0006924
   32.0    0.0181775   0.0018085
   64.0    0.075745    0.0076462
  128.0    0.329361    0.0290844
  256.0    1.38863     0.116684
  512.0    5.68782     0.487307
 1024.0   21.3085      2.001
 2048.0   77.7479      9.0509
 4096.0  377.481      42.9069
###################################################################

julia> using KendallTau;include("scripts/performancetests.jl");impactofmissings(1000,1000,0.1)
###################################################################
Executing impactofmissings 2023-02-14T14:30:14.035
ComputerName = DESKTOP-HSGAM5S
Threads.nthreads() = 20
--------------------------------------------------
size(matrix1) = (1000, 1000)
KendallTau.corkendall(matrix1) no missings in argument(s)
  1.843 s (7171457 allocations: 164.03 MiB)
KendallTau.corkendall(matrix1) argument(s) amended to contain 10.0% missings
  1.820 s (7071209 allocations: 162.56 MiB)
Speed ratio KendallTau.corkendall (10.0% missings) vs KendallTau.corkendall (no missings): 1.0130178631467728
Ratio of memory allocated KendallTau.corkendall (10.0% missings) vs KendallTau.corkendall (no missings): 0.9910494964696409
--------------------------------------------------
size(matrix1) = (1000, 1000)
size(matrix2) = (1000, 1000)
KendallTau.corkendall(matrix1,matrix2) no missings in argument(s)
  2.912 s (9327928 allocations: 242.82 MiB)
KendallTau.corkendall(matrix1,matrix2) argument(s) amended to contain 10.0% missings
  2.970 s (9238315 allocations: 241.45 MiB)
Speed ratio KendallTau.corkendall (10.0% missings) vs KendallTau.corkendall (no missings): 0.9803929735298779
Ratio of memory allocated KendallTau.corkendall (10.0% missings) vs KendallTau.corkendall (no missings): 0.9943687109637357
--------------------------------------------------
size(vector1) = (1000,)
size(matrix1) = (1000, 1000)
KendallTau.corkendall(vector1,matrix1) no missings in argument(s)
  10.404 ms (2287802 allocations: 36.37 MiB)
KendallTau.corkendall(vector1,matrix1) argument(s) amended to contain 10.0% missings
  9.578 ms (2207034 allocations: 35.13 MiB)
Speed ratio KendallTau.corkendall (10.0% missings) vs KendallTau.corkendall (no missings): 1.086183496199783
Ratio of memory allocated KendallTau.corkendall (10.0% missings) vs KendallTau.corkendall (no missings): 0.9661107836000159
KendallTau.corkendall(matrix1,vector1) argument(s) amended to contain 10.0% missings
  9.155 ms (2134144 allocations: 34.01 MiB)
Speed ratio KendallTau.corkendall (10.0% missings) vs KendallTau.corkendall (no missings): 0.9606898660899579
Ratio of memory allocated KendallTau.corkendall (10.0% missings) vs KendallTau.corkendall (no missings): 0.9683365457252164
--------------------------------------------------
size(vector1) = (1000,)
size(vector2) = (1000,)
typeof(vector1) = Vector{Union{Missing, Float64}}
typeof(vector2) = Vector{Union{Missing, Float64}}
KendallTau.corkendall(vector1,vector2) no missings in argument(s)
  24.200 μs (9 allocations: 61.27 KiB)
typeof(vector1) = Vector{Union{Missing, Float64}}
typeof(vector2) = Vector{Union{Missing, Float64}}
KendallTau.corkendall(vector1,vector2) argument(s) amended to contain 10.0% missings
  21.900 μs (9 allocations: 60.64 KiB)
Speed ratio KendallTau.corkendall (10.0% missings) vs KendallTau.corkendall (no missings): 1.1050228310502284
Ratio of memory allocated KendallTau.corkendall (10.0% missings) vs KendallTau.corkendall (no missings): 0.9897985207855139
###################################################################

julia> using StatsBase,KendallTau;include("scripts/performancetests.jl");how_scaleable([StatsBase.corkendall,KendallTau.corkendall],1000,[2,3,4,5,6,7,8,16,32,64,128,256,512,1024,2048,4096],false,true,true)
###################################################################
Executing how_scaleable 2023-02-17T20:48:06.439
ComputerName = 109OCS-KITCHEN
fns[1] = StatsBase.corkendall
fns[2] = KendallTau.corkendall
ncs = [2, 3, 4, 5, 6, 7, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
with_missings = false
use_benchmark_tools = true
Threads.nthreads() = 8
  87.500 μs (10 allocations: 51.80 KiB)
nc = 2, nr = 1000, f = StatsBase.corkendall,  time = 8.75e-5
  123.500 μs (76 allocations: 117.80 KiB)
nc = 2, nr = 1000, f = KendallTau.corkendall,  time = 0.0001235, ratio = 0.708502024291498
  226.800 μs (25 allocations: 139.34 KiB)
nc = 3, nr = 1000, f = StatsBase.corkendall,  time = 0.0002268
  185.400 μs (84 allocations: 173.45 KiB)
nc = 3, nr = 1000, f = KendallTau.corkendall,  time = 0.0001854, ratio = 1.2233009708737863
  425.800 μs (46 allocations: 262.73 KiB)
nc = 4, nr = 1000, f = StatsBase.corkendall,  time = 0.0004258
  243.700 μs (93 allocations: 229.28 KiB)
nc = 4, nr = 1000, f = KendallTau.corkendall,  time = 0.0002437, ratio = 1.7472302010668856
  680.900 μs (73 allocations: 421.94 KiB)
nc = 5, nr = 1000, f = StatsBase.corkendall,  time = 0.0006809
  303.400 μs (102 allocations: 285.00 KiB)
nc = 5, nr = 1000, f = KendallTau.corkendall,  time = 0.0003034, ratio = 2.2442320369149638
  987.200 μs (106 allocations: 617.00 KiB)
nc = 6, nr = 1000, f = StatsBase.corkendall,  time = 0.0009872
  355.200 μs (111 allocations: 340.88 KiB)
nc = 6, nr = 1000, f = KendallTau.corkendall,  time = 0.0003552, ratio = 2.779279279279279
  1.357 ms (145 allocations: 847.84 KiB)
nc = 7, nr = 1000, f = StatsBase.corkendall,  time = 0.0013569
  405.000 μs (120 allocations: 396.61 KiB)
nc = 7, nr = 1000, f = KendallTau.corkendall,  time = 0.000405, ratio = 3.3503703703703707
  1.759 ms (190 allocations: 1.09 MiB)
nc = 8, nr = 1000, f = StatsBase.corkendall,  time = 0.0017589
  485.300 μs (129 allocations: 452.50 KiB)
nc = 8, nr = 1000, f = KendallTau.corkendall,  time = 0.0004853, ratio = 3.6243560684112923
  7.030 ms (766 allocations: 4.43 MiB)
nc = 16, nr = 1000, f = StatsBase.corkendall,  time = 0.0070302
  1.596 ms (151 allocations: 510.36 KiB)
nc = 16, nr = 1000, f = KendallTau.corkendall,  time = 0.0015956, ratio = 4.4059914765605415
  28.475 ms (3070 allocations: 17.84 MiB)
nc = 32, nr = 1000, f = StatsBase.corkendall,  time = 0.0284747
  5.691 ms (183 allocations: 517.86 KiB)
nc = 32, nr = 1000, f = KendallTau.corkendall,  time = 0.0056906, ratio = 5.003813306154008
  115.364 ms (12287 allocations: 71.51 MiB)
nc = 64, nr = 1000, f = StatsBase.corkendall,  time = 0.1153636
  22.941 ms (248 allocations: 544.78 KiB)
nc = 64, nr = 1000, f = KendallTau.corkendall,  time = 0.0229408, ratio = 5.028752266703863
  468.920 ms (49151 allocations: 286.36 MiB)
nc = 128, nr = 1000, f = StatsBase.corkendall,  time = 0.4689199
  96.513 ms (376 allocations: 646.78 KiB)
nc = 128, nr = 1000, f = KendallTau.corkendall,  time = 0.0965125, ratio = 4.858644217070328
  1.860 s (196607 allocations: 1.12 GiB)
nc = 256, nr = 1000, f = StatsBase.corkendall,  time = 1.8602109
  392.028 ms (633 allocations: 1.02 MiB)
nc = 256, nr = 1000, f = KendallTau.corkendall,  time = 0.3920279, ratio = 4.745098244283124
  7.547 s (786431 allocations: 4.48 GiB)
nc = 512, nr = 1000, f = StatsBase.corkendall,  time = 7.5472971
  1.628 s (1149 allocations: 2.54 MiB)
nc = 512, nr = 1000, f = KendallTau.corkendall,  time = 1.6280758, ratio = 4.635716039756871
  31.677 s (3145727 allocations: 17.91 GiB)
nc = 1024, nr = 1000, f = StatsBase.corkendall,  time = 31.6766512
  7.495 s (2169 allocations: 8.59 MiB)
nc = 1024, nr = 1000, f = KendallTau.corkendall,  time = 7.4945787, ratio = 4.22660865513361
  126.357 s (12582911 allocations: 71.65 GiB)
nc = 2048, nr = 1000, f = StatsBase.corkendall,  time = 126.3572958
  28.059 s (4223 allocations: 32.68 MiB)
nc = 2048, nr = 1000, f = KendallTau.corkendall,  time = 28.0592791, ratio = 4.503226734716788
  493.926 s (50331647 allocations: 286.62 GiB)
nc = 4096, nr = 1000, f = StatsBase.corkendall,  time = 493.9260795
  117.206 s (8313 allocations: 128.87 MiB)
nc = 4096, nr = 1000, f = KendallTau.corkendall,  time = 117.2061244, ratio = 4.214166128506507
16×3 Named Matrix{Float64}
A ╲ B │            numcols(x)   StatsBase.corkendall  KendallTau.corkendall
──────┼────────────────────────────────────────────────────────────────────
1     │                   2.0                8.75e-5              0.0001235
2     │                   3.0              0.0002268              0.0001854
3     │                   4.0              0.0004258              0.0002437
4     │                   5.0              0.0006809              0.0003034
5     │                   6.0              0.0009872              0.0003552
6     │                   7.0              0.0013569               0.000405
7     │                   8.0              0.0017589              0.0004853
8     │                  16.0              0.0070302              0.0015956
9     │                  32.0              0.0284747              0.0056906
10    │                  64.0               0.115364              0.0229408
11    │                 128.0                0.46892              0.0965125
12    │                 256.0                1.86021               0.392028
13    │                 512.0                 7.5473                1.62808
14    │                1024.0                31.6767                7.49458
15    │                2048.0                126.357                28.0593
16    │                4096.0                493.926                117.206
###################################################################

#TODO run the test below on 12-core PC to generate new chart for README.md
julia> using StatsBase,KendallTau;include("scripts/performancetests.jl");how_scaleable([StatsBase.corkendall,KendallTau.corkendall],1000,vcat(2:31, 2 .^(5:15)),false,true,true)


using KendallTau
small_x = rand(1040, 10);
small_x = ifelse.(small_x .< 0.05, missing, small_x);
n_repeat = 10;
big_x = repeat(small_x, outer=[1, n_repeat]);
size(small_x), size(big_x)
@time small_tau = corkendall(small_x, skipmissing = :pairwise);
@time big_tau = corkendall(big_x, skipmissing = :pairwise);
size(small_tau), size(big_tau)
big_tau == repeat(small_tau, outer=[n_repeat, n_repeat])


julia> using StatsBase,KendallTau;include("scripts/performancetests.jl");how_scaleable([StatsBase.corkendall,KendallTau.corkendall],1000,vcat(2 .^(1:12)),false,true,true)
###################################################################
Executing how_scaleable 2023-02-20T11:57:20.535
ComputerName = DESKTOP-HSGAM5S
fns[1] = StatsBase.corkendall
fns[2] = KendallTau.corkendall
ncs = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
with_missings = false
use_benchmark_tools = true
Threads.nthreads() = 20
  28.200 μs (10 allocations: 51.80 KiB)
nc = 2, nr = 1000, f = StatsBase.corkendall,  time = 2.82e-5
  46.300 μs (147 allocations: 126.67 KiB)
nc = 2, nr = 1000, f = KendallTau.corkendall,  time = 4.63e-5, ratio = 0.6090712742980562
  273.300 μs (46 allocations: 262.73 KiB)
nc = 4, nr = 1000, f = StatsBase.corkendall,  time = 0.0002733
  141.600 μs (165 allocations: 238.19 KiB)
nc = 4, nr = 1000, f = KendallTau.corkendall,  time = 0.0001416, ratio = 1.9300847457627117
  1.123 ms (190 allocations: 1.09 MiB)
nc = 8, nr = 1000, f = StatsBase.corkendall,  time = 0.0011231
  301.300 μs (200 allocations: 461.38 KiB)
nc = 8, nr = 1000, f = KendallTau.corkendall,  time = 0.0003013, ratio = 3.727514105542648
  4.495 ms (766 allocations: 4.43 MiB)
nc = 16, nr = 1000, f = StatsBase.corkendall,  time = 0.0044948
  628.300 μs (273 allocations: 908.66 KiB)
nc = 32, nr = 1000, f = StatsBase.corkendall,  time = 0.0184494
  1.790 ms (339 allocations: 1.17 MiB)
nc = 32, nr = 1000, f = KendallTau.corkendall,  time = 0.0017904, ratio = 10.304624664879357
  79.373 ms (12287 allocations: 71.51 MiB)
nc = 64, nr = 1000, f = StatsBase.corkendall,  time = 0.0793728
  6.860 ms (404 allocations: 1.19 MiB)
nc = 64, nr = 1000, f = KendallTau.corkendall,  time = 0.0068598, ratio = 11.570716347415376
  335.549 ms (49151 allocations: 286.36 MiB)
nc = 128, nr = 1000, f = StatsBase.corkendall,  time = 0.3355492
  26.782 ms (532 allocations: 1.29 MiB)
nc = 128, nr = 1000, f = KendallTau.corkendall,  time = 0.0267824, ratio = 12.528720353665092
  1.382 s (196607 allocations: 1.12 GiB)
nc = 256, nr = 1000, f = StatsBase.corkendall,  time = 1.381984
  114.043 ms (788 allocations: 1.68 MiB)
nc = 256, nr = 1000, f = KendallTau.corkendall,  time = 0.1140433, ratio = 12.118063928350022
  5.744 s (786431 allocations: 4.48 GiB)
nc = 512, nr = 1000, f = StatsBase.corkendall,  time = 5.7442661
  485.892 ms (1302 allocations: 3.20 MiB)
nc = 512, nr = 1000, f = KendallTau.corkendall,  time = 0.4858916, ratio = 11.822114438693733
  22.617 s (3145727 allocations: 17.91 GiB)
nc = 1024, nr = 1000, f = StatsBase.corkendall,  time = 22.6173605
  1.939 s (2328 allocations: 9.25 MiB)
nc = 1024, nr = 1000, f = KendallTau.corkendall,  time = 1.9385663, ratio = 11.667055441952128
  77.638 s (12582911 allocations: 71.65 GiB)
nc = 2048, nr = 1000, f = StatsBase.corkendall,  time = 77.6381268
  9.207 s (4375 allocations: 33.34 MiB)
nc = 2048, nr = 1000, f = KendallTau.corkendall,  time = 9.2073107, ratio = 8.432226230836328
  362.157 s (50331647 allocations: 286.62 GiB)
nc = 4096, nr = 1000, f = StatsBase.corkendall,  time = 362.1569472
  40.150 s (8470 allocations: 129.53 MiB)
nc = 4096, nr = 1000, f = KendallTau.corkendall,  time = 40.1496269, ratio = 9.020182132751026
12×3 Named Matrix{Float64}
A ╲ B │            numcols(x)   StatsBase.corkendall  KendallTau.corkendall
──────┼────────────────────────────────────────────────────────────────────
1     │                   2.0                2.82e-5                4.63e-5
2     │                   4.0              0.0002733              0.0001416
3     │                   8.0              0.0011231              0.0003013
4     │                  16.0              0.0044948              0.0006283
5     │                  32.0              0.0184494              0.0017904
6     │                  64.0              0.0793728              0.0068598
7     │                 128.0               0.335549              0.0267824
8     │                 256.0                1.38198               0.114043
9     │                 512.0                5.74427               0.485892
10    │                1024.0                22.6174                1.93857
11    │                2048.0                77.6381                9.20731
12    │                4096.0                362.157                40.1496
###################################################################

julia> using StatsBase,KendallTau;include("scripts/performancetests.jl");how_scaleable([StatsBase.corspearman,KendallTau.corspearman],1000,2 .^ (1:10),false,true,true)
###################################################################
Executing how_scaleable 2023-02-20T14:48:06.410
ComputerName = DESKTOP-HSGAM5S
fns[1] = StatsBase.corspearman
fns[2] = KendallTau.corspearman
ncs = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]
with_missings = false
use_benchmark_tools = true
Threads.nthreads() = 20
  33.200 μs (14 allocations: 48.06 KiB)
nc = 2, nr = 1000, f = StatsBase.corspearman,  time = 3.32e-5
  26.400 μs (19 allocations: 64.22 KiB)
nc = 2, nr = 1000, f = KendallTau.corspearman,  time = 2.64e-5, ratio = 1.2575757575757576
  212.700 μs (42 allocations: 159.94 KiB)
nc = 4, nr = 1000, f = StatsBase.corspearman,  time = 0.0002127
  102.100 μs (29 allocations: 127.38 KiB)
nc = 4, nr = 1000, f = KendallTau.corspearman,  time = 0.0001021, ratio = 2.0832517140058764
  964.600 μs (146 allocations: 575.50 KiB)
nc = 8, nr = 1000, f = StatsBase.corspearman,  time = 0.0009646
  248.800 μs (45 allocations: 254.19 KiB)
nc = 8, nr = 1000, f = KendallTau.corspearman,  time = 0.0002488, ratio = 3.8770096463022514
  4.036 ms (546 allocations: 2.12 MiB)
nc = 16, nr = 1000, f = StatsBase.corspearman,  time = 0.0040357
  535.800 μs (77 allocations: 508.62 KiB)
nc = 16, nr = 1000, f = KendallTau.corspearman,  time = 0.0005358, ratio = 7.532101530421799
  17.384 ms (2114 allocations: 8.24 MiB)
nc = 32, nr = 1000, f = StatsBase.corspearman,  time = 0.0173845
  1.087 ms (141 allocations: 1020.41 KiB)
nc = 32, nr = 1000, f = KendallTau.corspearman,  time = 0.0010865, ratio = 16.000460193281178
  74.430 ms (8323 allocations: 32.47 MiB)
nc = 64, nr = 1000, f = StatsBase.corspearman,  time = 0.0744299
  2.238 ms (270 allocations: 2.01 MiB)
nc = 64, nr = 1000, f = KendallTau.corspearman,  time = 0.0022378, ratio = 33.26030029493252
  281.393 ms (33027 allocations: 128.87 MiB)
nc = 128, nr = 1000, f = StatsBase.corspearman,  time = 0.2813931
  4.840 ms (526 allocations: 4.08 MiB)
nc = 128, nr = 1000, f = KendallTau.corspearman,  time = 0.0048405, ratio = 58.13306476603657
  1.141 s (131587 allocations: 513.50 MiB)
nc = 256, nr = 1000, f = StatsBase.corspearman,  time = 1.1406878
  10.029 ms (1038 allocations: 8.40 MiB)
nc = 256, nr = 1000, f = KendallTau.corspearman,  time = 0.010029, ratio = 113.73893708246086
  4.586 s (525315 allocations: 2.00 GiB)
nc = 512, nr = 1000, f = StatsBase.corspearman,  time = 4.5860115
  20.731 ms (2062 allocations: 17.81 MiB)
nc = 512, nr = 1000, f = KendallTau.corspearman,  time = 0.0207313, ratio = 221.2119596937963
  18.521 s (2099203 allocations: 8.00 GiB)
nc = 1024, nr = 1000, f = StatsBase.corspearman,  time = 18.5208532
  46.678 ms (4110 allocations: 39.61 MiB)
nc = 1024, nr = 1000, f = KendallTau.corspearman,  time = 0.0466779, ratio = 396.7799151204317
10×3 Named Matrix{Float64}
A ╲ B │             numcols(x)   StatsBase.corspearman  KendallTau.corspearman
──────┼───────────────────────────────────────────────────────────────────────
1     │                    2.0                 3.32e-5                 2.64e-5
2     │                    4.0               0.0002127               0.0001021
3     │                    8.0               0.0009646               0.0002488
4     │                   16.0               0.0040357               0.0005358
5     │                   32.0               0.0173845               0.0010865
6     │                   64.0               0.0744299               0.0022378
7     │                  128.0                0.281393               0.0048405
8     │                  256.0                 1.14069                0.010029
9     │                  512.0                 4.58601               0.0207313
10    │                 1024.0                 18.5209               0.0466779
###################################################################